#pragma once

#include <map>
#include <vector>
#include <unordered_set>

#include <llvm/IR/InstVisitor.h>

#include "CatDataDependencies.hpp"
#include "CatFunction.hpp"

using MAP_TYPE = std::map<llvm::Value*, std::unordered_set<llvm::CallInst*>>;

/**
 * Visitor class that generates GEN and KILL sets for each
 * llvm::Instruction. Must run after CatCallInstVisitor and must
 * have called setCallInstructions() and setValueModifications()
 * before calling visit(). No checks are done to ensure these
 * preconditions are met.
 */
class CatGenKillVisitor : public llvm::InstVisitor<CatGenKillVisitor> {

    const std::vector<llvm::CallInst*>* callInstructions_;
    const MAP_TYPE* valueModificationMap_;

    // GEN and KILL sets are stored here
    std::map<llvm::Instruction*, CatDataDependencies> genKillMap_;

    /**
     * Gets the llvm::Value that is modified by a given CAT function.
     *
     * @param func CAT function to analyze
     * @param callInst Call instruction representing the CAT function
     * @return The llvm::Value that is modified by the CAT function, or nullptr if the instruction doesn't modify anything
     */
    llvm::Value* getModifiedValue(const CatFunction* func, llvm::CallInst& callInst);

    public:

        /**
         * Constructor.
         */
        CatGenKillVisitor() : callInstructions_(nullptr), valueModificationMap_(nullptr), genKillMap_() {}

        /**
         * Called for each instruction. Will generate GEN and KILL sets
         * for the instructions and print them out.
         */
        void visitInstruction(llvm::Instruction& inst);

        /**
         * Sets the call instructions list generated by the CatCallInstVisitor.
         *
         * @param callInstructions The list of all call instructions in this function.
         */
        void setCallInstructions(const std::vector<llvm::CallInst*>& callInstructions) {
            callInstructions_ = &callInstructions;
        }

        /**
         * Sets the value modification map generated by the CatCallInstVisitor.
         *
         * @param valueModificationMap Map from modified values to all instructions that modify them.
         */
        void setValueModifications(const MAP_TYPE& valueModificationMap) {
            valueModificationMap_ = &valueModificationMap;
        }

        const auto& getGenKillMap() {
            return genKillMap_;
        }

        void print();
};
