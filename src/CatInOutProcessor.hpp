#pragma once

#include <vector>
#include <map>
#include <unordered_set>

#include <llvm/IR/Function.h>
#include <llvm/ADT/SmallBitVector.h>

#include "CatDataDependencies.hpp"

using MAP_TYPE = std::map<llvm::Value*, std::unordered_set<llvm::Instruction*>>;

class CatInOutProcessor {

    const std::vector<llvm::Instruction*>* mappedInstructions_;
    std::map<llvm::Instruction*, CatDataDependencies>* dataDepsMap_;
    std::map<llvm::BasicBlock*, CatDataDependencies> bbDataDepsMap_;

    bool changesHappened_;

    void processBasicBlock(llvm::BasicBlock& bb);
    llvm::Instruction* processInstruction(llvm::Instruction& inst, llvm::Instruction* prevInst);

    public:

        /**
         * Constructor.
         */
        CatInOutProcessor() : mappedInstructions_(nullptr), dataDepsMap_(nullptr), bbDataDepsMap_(), changesHappened_(false) {}

        /**
         * Sets the call instructions list generated by the CatCallInstVisitor.
         *
         * @param mappedInstructions The list of all call instructions in this function.
         */
        void setMappedInstructions(const std::vector<llvm::Instruction*>& mappedInstructions) {
            mappedInstructions_ = &mappedInstructions;
        }

        void print();

        void setDataDepsMap(std::map<llvm::Instruction*, CatDataDependencies>& dataDepsMap) {
            dataDepsMap_ = &dataDepsMap;
        }

        bool changesHappened() {
            return changesHappened_;
        }

        void processOnce(llvm::Function& func);
};
