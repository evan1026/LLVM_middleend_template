#pragma once

#include <vector>
#include <map>
#include <unordered_set>

#include <llvm/IR/Function.h>
#include <llvm/ADT/SmallBitVector.h>

#include "CatDataDependencies.hpp"

using MAP_TYPE = std::map<llvm::Value*, std::unordered_set<llvm::Instruction*>>;

/**
 * Class that generates IN/OUT sets for each instruction that CatInstructionVisitor
 * has determined is worth visiting. See process() and processOnce().
 */
class CatInOutProcessor {

    const std::vector<llvm::Instruction*>* mappedInstructions_;
    std::map<llvm::Instruction*, CatDataDependencies>* dataDepsMap_;
    std::map<llvm::BasicBlock*, CatDataDependencies> bbDataDepsMap_;

    bool changesHappened_;

    /**
     * Processes IN/OUT sets for single basic blocks.
     *
     * @param bb The basic block to process.
     */
    void processBasicBlock(llvm::BasicBlock& bb);

    /**
     * Processes IN/OUT sets for a single instruction.
     *
     * Takes in the previous instruction as a parameter. This should be
     * set to the return of this function from the previous call to this
     * function. This is done so that instructions can be skipped such that
     * not every instruction in the basic block is considered for IN/OUT
     * processing.
     *
     * The determination for whether an instruction is skipped or not
     * is done by CatInstructionVisitor. This code checks the output data
     * structures from that class to determine if an instruction should be
     * considered or not.
     *
     * @param inst The instruction to process
     * @param prevInst The previous instruction, or `nullptr` if this is the first instruction in the basic block (or just the first one we care about)
     * @return The last instruction that was processed (either inst if it was processed, or prevInst otherwise)
     */
    llvm::Instruction* processInstruction(llvm::Instruction& inst, llvm::Instruction* prevInst);

    public:

        /**
         * Constructor.
         */
        CatInOutProcessor() : mappedInstructions_(nullptr), dataDepsMap_(nullptr), bbDataDepsMap_(), changesHappened_(false) {}

        /**
         * Sets the instructions list generated by the CatInstructionVisitor.
         *
         * @param mappedInstructions The list of all call instructions in this function.
         */
        void setMappedInstructions(const std::vector<llvm::Instruction*>& mappedInstructions) {
            mappedInstructions_ = &mappedInstructions;
        }

        /**
         * Sets the map that holds GEN/KILL/IN/OUT data.
         *
         * Should be set to the return from CatGenKillVisitor::getGenKillMap().
         *
         * @param dataDepsMap Data dependency map
         */
        void setDataDepsMap(std::map<llvm::Instruction*, CatDataDependencies>& dataDepsMap) {
            dataDepsMap_ = &dataDepsMap;
        }

        /**
         * Returns whether changes to OUT sets happened during the last call to processOnce().
         *
         * If changes to OUT sets occurred, processOnce() should be called repeatedly until this
         * method returns `false`.
         *
         * @return Whether or not changes occurred
         */
        bool changesHappened() {
            return changesHappened_;
        }

        /**
         * Runs a single IN/OUT set update pass.
         *
         * @param func The function we are processing.
         */
        void processOnce(llvm::Function& func);

        /**
         * Keep running processOnce() until changesHappened() returns false.
         *
         * @param func The function we are processing.
         */
        void process(llvm::Function& func);

        /**
         * Prints out IN/OUT sets in H2 format.
         */
        void print();
};
