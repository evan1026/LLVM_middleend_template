#pragma once

#include <map>
#include <vector>
#include <unordered_set>

#include <llvm/IR/InstVisitor.h>

#include "CatDataDependencies.hpp"
#include "CatFunction.hpp"

using MAP_TYPE = std::map<llvm::Value*, std::unordered_set<llvm::CallInst*>>;

class CatInOutVisitor : public llvm::InstVisitor<CatInOutVisitor> {

    const std::vector<llvm::CallInst*>* callInstructions_;
    const MAP_TYPE* valueModificationMap_;
    std::map<llvm::Instruction*, CatDataDependencies>* dataDepsMap_;

    bool changesHappened_;

    public:

        /**
         * Constructor.
         */
        CatInOutVisitor() : callInstructions_(nullptr), valueModificationMap_(nullptr), dataDepsMap_(nullptr), changesHappened_(false) {}

        void visitInstruction(llvm::Instruction& inst);

        /**
         * Sets the call instructions list generated by the CatCallInstVisitor.
         *
         * @param callInstructions The list of all call instructions in this function.
         */
        void setCallInstructions(const std::vector<llvm::CallInst*>& callInstructions) {
            callInstructions_ = &callInstructions;
        }

        /**
         * Sets the value modification map generated by the CatCallInstVisitor.
         *
         * @param valueModificationMap Map from modified values to all instructions that modify them.
         */
        void setValueModifications(const MAP_TYPE& valueModificationMap) {
            valueModificationMap_ = &valueModificationMap;
        }

        void setDataDepsMap(std::map<llvm::Instruction*, CatDataDependencies>& dataDepsMap) {
            dataDepsMap_ = &dataDepsMap;
        }

        bool changesHappened() {
            return changesHappened_;
        }
};
